{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mohan\\\\codebase\\\\react-router-dom\\\\frontend\\\\src\\\\pages\\\\Events.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport EventsList from \"../components/EventsList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  // const [isLoading, setIsLoading] = useState(false);\n  const [fetchedEvents, setFetchedEvents] = useState();\n  // const [error, setError] = useState();\n\n  // useEffect(() => {\n  //   async function fetchEvents() {\n  //     setIsLoading(true);\n  //     const response = await fetch(\"http://localhost:8080/events\");\n\n  //     if (!response.ok) {\n  //       setError(\"Fetching events failed.\");\n  //     } else {\n  //       const resData = await response.json();\n  //       setFetchedEvents(resData.events);\n  //     }\n  //     setIsLoading(false);\n  //   }\n\n  //   fetchEvents();\n  // }, []);\n  return /*#__PURE__*/_jsxDEV(EventsList, {\n    events: fetchedEvents\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 10\n  }, this);\n}\n_s(EventsPage, \"cFLmqSsrI9xNKe+0uOJjQDwJxi4=\");\n_c = EventsPage;\nexport default EventsPage;\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useEffect","useState","EventsList","jsxDEV","_jsxDEV","EventsPage","_s","fetchedEvents","setFetchedEvents","events","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/mohan/codebase/react-router-dom/frontend/src/pages/Events.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nimport EventsList from \"../components/EventsList\";\r\n\r\nfunction EventsPage() {\r\n  // const [isLoading, setIsLoading] = useState(false);\r\n  const [fetchedEvents, setFetchedEvents] = useState();\r\n  // const [error, setError] = useState();\r\n\r\n  // useEffect(() => {\r\n  //   async function fetchEvents() {\r\n  //     setIsLoading(true);\r\n  //     const response = await fetch(\"http://localhost:8080/events\");\r\n\r\n  //     if (!response.ok) {\r\n  //       setError(\"Fetching events failed.\");\r\n  //     } else {\r\n  //       const resData = await response.json();\r\n  //       setFetchedEvents(resData.events);\r\n  //     }\r\n  //     setIsLoading(false);\r\n  //   }\r\n\r\n  //   fetchEvents();\r\n  // }, []);\r\n  return <EventsList events={fetchedEvents} />;\r\n}\r\n\r\nexport default EventsPage;\r\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB;EACA,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGP,QAAQ,CAAC,CAAC;EACpD;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA,oBAAOG,OAAA,CAACF,UAAU;IAACO,MAAM,EAAEF;EAAc;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC9C;AAACP,EAAA,CAtBQD,UAAU;AAAAS,EAAA,GAAVT,UAAU;AAwBnB,eAAeA,UAAU;AAAC,IAAAS,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}